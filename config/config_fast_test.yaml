# Configurazione Preprocessing Pipeline - FAST TEST VERSION
# =================================

# Logging Configuration
logging:
  level: ${LOG_LEVEL:-INFO}
  format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
  file: ${LOG_FILE:-'logs/pipeline.log'}
  console: ${LOG_CONSOLE:-true}
  rotate:
    enabled: ${LOG_ROTATE:-false}
    max_bytes: ${LOG_MAX_BYTES:-10485760}
    backup_count: ${LOG_BACKUP_COUNT:-5}

# Execution Configuration - FAST TEST
execution:
  steps: ["all"]
  force_reload: true

# Experiment tracking (Weights & Biases)
tracking:
  wandb:
    enabled: ${WANDB_ENABLED:-true}
    project: ${WANDB_PROJECT:-'stimatrix'}
    entity: ${WANDB_ENTITY:-null}
    group: ${WANDB_GROUP:-null}
    tags: ["fast-test"]
    mode: ${WANDB_MODE:-'online'}
    name: null

# Paths Configuration
paths:
  raw_data: ${RAW_DATA_DIR:-'data/raw'}
  preprocessed_data: ${PREPROC_DIR:-'data/preprocessed'}
  schema: ${SCHEMA_PATH:-'schema/db_schema.json'}
  models_dir: ${MODELS_DIR:-'models'}
  raw_filename: 'raw.parquet'
  preprocessed_filename: 'preprocessed.parquet'

# Database Configuration (for data retrieval)
database:
  schema_name: null
  selected_aliases: ['A', 'AI', 'PC', 'ISC', 'II', 'PC_OZ', 'OZ', 'OV', 'C1', 'C2']
  custom_aliases:
    attiimmobili_cened1: 'C1'
    attiimmobili_cened2: 'C2'
  use_poi: true
  use_ztl: true
  output_format: 'parquet'
  compression: 'snappy'

# Target configuration
target:
  column_candidates: ['AI_Prezzo_MQ', 'AI_Prezzo_Ridistribuito']
  transform: 'boxcox'
  log10_offset: 1.0

# Outlier detection
outliers:
  method: 'ensemble'
  z_thresh: 3.5
  iqr_factor: 1.5
  iso_forest_contamination: 0.01
  group_by_col: 'AI_IdTipologiaEdilizia'
  min_group_size: 30
  fallback_strategy: 'global'

# Missing value imputation
imputation:
  numeric_strategy: 'median'
  categorical_strategy: 'most_frequent'
  group_by_col: 'AI_IdTipologiaEdilizia'

# Categorical encoding
encoding: &encoding_defaults
  one_hot_max: 10
  target_encoding_range: [11, 30]
  frequency_encoding_range: [31, 100]
  ordinal_encoding_range: [101, 200]
  drop_above: 200
  target_encoder:
    smoothing: 1.0
    min_samples_leaf: 1
  handle_booleans: true
  boolean_null_value: -1

# Temporal split configuration
temporal_split:
  year_col: 'A_AnnoStipula'
  month_col: 'A_MeseStipula'
  mode: 'fraction'
  fraction:
    train: 0.7
    valid: 0.2
  date:
    test_start_year: 2023
    test_start_month: 1

# Numeric coercion configuration
numeric_coercion:
  enabled: true
  threshold: 0.95
  blacklist_globs:
    - 'II_*'
    - 'AI_Id*'
    - 'Foglio'
    - 'Particella*'
    - 'Subalterno'
    - 'SezioneAmministrativa'
    - 'ZonaOmi'
    - '*COD*'

# PCA configuration
pca: &pca_defaults
  enabled: false
  n_components: 0.95
  random_state: 42

# Correlation pruning
correlation: &correlation_defaults
  numeric_threshold: 0.95

# Non-descriptive columns pruning
drop_non_descriptive:
  na_threshold: 0.80

# Feature extraction toggles
feature_extraction:
  geometry: true
  json: true

# Advanced Features Configuration
advanced_features:
  temporal:
    enabled: true
    features: ['quarter', 'is_summer', 'month_sin', 'month_cos', 'months_since_start']
  geographic:
    enabled: true
    spatial_clusters:
      enabled: true
      n_clusters: 8
      feature_name: 'geo_cluster'
    distance_to_center:
      enabled: true
      center_lat: 45.1564
      center_lon: 10.7914
      feature_name: 'distance_to_center_km'
    density:
      enabled: true
      radius_km: 0.5
      feature_name: 'density_500m'
  interactions:
    enabled: true
    categorical_numeric:
      - ['AI_Superficie', 'AI_ZonaOmi']
      - ['AI_Superficie', 'AI_IdTipologiaEdilizia']
    categorical_categorical:
      - ['AI_IdCategoriaCatastale', 'AI_ZonaOmi']
    polynomial:
      columns: ['AI_Superficie']
      degree: 2
  missing_patterns:
    enabled: true
    create_flags_for_prefixes: ['C1_', 'C2_']
    feature_name_template: 'has_{prefix}'

# Feature pruning
feature_pruning:
  drop_columns:
    - 'A_ImmobiliPrincipaliConSuperficieValorizzata'
    - 'AI_SuperficieCalcolata'
    - 'AI_SuperficieVisuraTotale'
    - 'AI_SuperficieVisuraTotaleE'
    - 'AI_SuperficieVisuraTotaleAttuale'
    - 'AI_SuperficieVisuraTotaleEAttuale'
  include_ai_superficie: false

# Scaling configuration
scaling: &scaling_defaults
  scaler_type: 'standard'
  with_mean: true
  with_std: true

# Winsorization
winsorization: &winsor_defaults
  enabled: false
  lower_quantile: 0.01
  upper_quantile: 0.99

# Profiles: generate multiple datasets tailored to model families
profiles:
  scaled:
    enabled: false
    output_prefix: 'scaled'
    encoding: *encoding_defaults
    winsorization: *winsor_defaults
    scaling: *scaling_defaults
    pca: *pca_defaults
    correlation: *correlation_defaults
    apply_advanced_encoding: false
  tree:
    enabled: true
    output_prefix: 'tree'
    encoding: *encoding_defaults
    correlation: *correlation_defaults
    apply_advanced_encoding: true
  catboost:
    enabled: true
    output_prefix: 'catboost'
    correlation: *correlation_defaults
    apply_advanced_encoding: false

# Training configuration - FAST TEST VERSION
training:
  primary_metric: "neg_root_mean_squared_error"
  report_metrics: ["r2", "rmse", "mse", "mae", "mape"]
  sampler: "tpe"
  seed: ${SEED:-42}
  n_jobs_default: ${N_JOBS:--1}
  timeout: ${TRAIN_TIMEOUT:-null}
  pruner:
    enabled: true
    type: "median"
    n_warmup_steps: 5
  cv_when_no_val:
    enabled: true
    kind: timeseries
    n_splits: 3
    shuffle: false

  models:
    linear:
      enabled: false
      profile: scaled
      trials: 1
      base_params: {}
      fit_params: {}
      search_space: {}
    ridge:
      enabled: false
      profile: scaled
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        alpha: {type: float, low: 0.000001, high: 1000.0, log: true}
    lasso:
      enabled: false
      profile: scaled
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        alpha: {type: float, low: 0.0001, high: 10.0, log: true}
    elasticnet:
      enabled: false
      profile: scaled
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        alpha: {type: float, low: 0.0001, high: 10.0, log: true}
        l1_ratio: {type: float, low: 0.0, high: 1.0}
    knn:
      enabled: false
      profile: scaled
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        n_neighbors: {type: int, low: 3, high: 50}
        weights: {type: categorical, choices: ["uniform", "distance"]}
        p: {type: int, low: 1, high: 2}
    dt:
      enabled: false
      profile: tree
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        max_depth: {type: int, low: 3, high: 15}
        min_samples_split: {type: int, low: 2, high: 10}
        min_samples_leaf: {type: int, low: 1, high: 10}
        max_features: {type: categorical, choices: ["sqrt", "log2", null]}
        min_impurity_decrease: {type: float, low: 0.0, high: 0.01}
    rf:
      enabled: true
      profile: tree
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        n_estimators: {type: int, low: 50, high: 200}
        max_depth: {type: int, low: 4, high: 20}
        min_samples_split: {type: int, low: 2, high: 10}
        min_samples_leaf: {type: int, low: 1, high: 10}
        max_features: {type: categorical, choices: ["sqrt", "log2", null]}
        bootstrap: {type: categorical, choices: [true, false]}
    gbr:
      enabled: true
      profile: tree
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        learning_rate: {type: float, low: 0.01, high: 0.3, log: true}
        n_estimators: {type: int, low: 50, high: 300}
        max_depth: {type: int, low: 2, high: 6}
        subsample: {type: float, low: 0.7, high: 1.0}
        min_samples_leaf: {type: int, low: 1, high: 10}
        max_features: {type: categorical, choices: ["sqrt", "log2", null]}
        min_samples_split: {type: int, low: 2, high: 10}
        min_impurity_decrease: {type: float, low: 0.0, high: 0.01}
    xgboost:
      enabled: true
      profile: tree
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        n_estimators: {type: int, low: 50, high: 300}
        max_depth: {type: int, low: 3, high: 8}
        learning_rate: {type: float, low: 0.01, high: 0.1, log: true}
        subsample: {type: float, low: 0.6, high: 0.9}
        colsample_bytree: {type: float, low: 0.6, high: 0.9}
        min_child_weight: {type: float, low: 1.0, high: 10.0, log: true}
        reg_alpha: {type: float, low: 1e-4, high: 10.0, log: true}
        reg_lambda: {type: float, low: 1e-4, high: 10.0, log: true}
        gamma: {type: float, low: 1e-4, high: 10.0, log: true}
    lightgbm:
      enabled: true
      profile: tree
      trials: 3
      base_params: {}
      fit_params: {}
      search_space:
        n_estimators: {type: int, low: 50, high: 300}
        max_depth: {type: categorical, choices: [-1, 4, 5, 6, 7, 8]}
        learning_rate: {type: float, low: 0.01, high: 0.1, log: true}
        num_leaves: {type: int, low: 16, high: 63}
        subsample: {type: float, low: 0.6, high: 0.9}
        colsample_bytree: {type: float, low: 0.6, high: 0.9}
        reg_alpha: {type: float, low: 1e-4, high: 10.0, log: true}
        reg_lambda: {type: float, low: 1e-4, high: 10.0, log: true}
        min_child_samples: {type: int, low: 20, high: 100}
        min_split_gain: {type: float, low: 0.0, high: 1.0}
    catboost:
      enabled: true
      profile: catboost
      trials: 3
      base_params: {}
      fit_params:
        cat_features: __categorical_indices__
      search_space:
        depth: {type: int, low: 4, high: 8}
        learning_rate: {type: float, low: 0.01, high: 0.3, log: true}
        l2_leaf_reg: {type: float, low: 1.0, high: 10.0}
        bagging_temperature: {type: float, low: 0.0, high: 3.0}
        border_count: {type: int, low: 32, high: 128}
        random_strength: {type: float, low: 0.0, high: 1.0}
        rsm: {type: float, low: 0.7, high: 1.0}

  # SHAP feature importance - FAST TEST VERSION
  shap:
    enabled: true
    sample_size: 5
    max_display: 10
    save_plots: true
    save_values: true

  # Ensemble settings
  ensembles:
    voting:
      enabled: true
      top_n: 2
      tune_weights: true
    stacking:
      enabled: true
      top_n: 3
      final_estimator: "ridge"
      cv_folds: 3

# Advanced Diagnostics Configuration
diagnostics:
  residual_analysis:
    enabled: true
    by_groups: ['AI_ZonaOmi', 'AI_IdCategoriaCatastale', 'price_quartile']
    save_worst_predictions: true
    top_n_worst: 20
    plots: ['residual_vs_predicted', 'residual_distribution']
  drift_detection:
    enabled: true
    methods: ['psi', 'ks_test']
    alert_threshold: 0.15
    save_report: true
    output_file: 'models/drift_report.json'

# Uncertainty Quantification
uncertainty:
  prediction_intervals:
    enabled: false  # Disabled in fast test for speed
    method: 'residual_bootstrap'
    n_bootstraps: 50
    confidence_levels: [0.9]

# Evaluation configuration
evaluation:
  group_metrics:
    enabled: true
    group_by_columns: ['AI_ZonaOmi', 'AI_IdCategoriaCatastale', 'AI_IdTipologiaEdilizia']
    min_group_size: 10
    original_scale: true
    report_metrics: ['r2', 'rmse', 'mse', 'mae', 'mape', 'medae']
    price_band:
      method: 'quantile'   # 'quantile' | 'fixed'
      quantiles: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
      # fixed_edges: [0, 100000, 200000, 400000, 800000, 1600000, .inf]
      mape_floor: 1000.0
      merge_small_bins: true
      label_prefix: 'PREZZO_'